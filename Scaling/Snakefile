import os
import sys

ROOT = os.path.abspath('../../..')
sys.path.append(ROOT)
from scripts.snakemake_module import *
from scipy.optimize import brentq
import numpy as np

np.random.seed(seed=0)
EXPERIMENT = os.path.abspath('.')
os.makedirs(EXPERIMENT + '/merge', exist_ok=True)

configfile: open_config(EXPERIMENT, 'config.yaml')
COMPILE = config['EXPERIMENT']['COMPILE']
SimuStab_params = '--fix_pop_size --fix_mut_rate --fix_gen_time --branch_wise_correlation'
SimuStab_params += " --root_age {0}".format(config['SimuStab']['ROOT_AGE'])
SimuStab_params += " --generation_time {0}".format(config['SimuStab']['GENERATION_TIME'])
SimuStab_params += " --mutation_rate_per_generation {0}".format(config['SimuStab']['MUTATION_RATE_PER_GENERATION'])
SimuStab_params += " --nbr_branches {0}".format(config['SimuStab']['NBR_BRANCHES'])
SimuStab_params += ' --nuc_matrix ' + copy_params(EXPERIMENT, ROOT, config['SimuStab']['NUC_MATRIX'])
SimuStab_params += ' --precision_matrix ' + copy_params(EXPERIMENT, ROOT, config['SimuStab']['PRECISION_MATRIX'])
if config['SimuStab']['GRANTHAM']:
    SimuStab_params += ' --grantham'
SIMUMODE_PARAM = {"SimuStab": SimuStab_params, "ToyStab": "--nbr_states {0}".format(config['ToyStab']['NBR_STATES'])}
CORE_PARAMS = "--exon_size {0}".format(config['PARAMS']['EXON_SIZE'])
CORE_PARAMS += " --beta {0}".format(config['PARAMS']['BETA'])
SIMULATORS = ["ToyStab", "SimuStab"]

diff_git_dir("{0}/SimuEvol".format(ROOT), "{0}/SimuEvol".format(EXPERIMENT))

X_SCALE = ["{0:.3g}".format(float(i) * config["PARAMS"]["POPULATION_SIZE"]) for i in
           np.logspace(-config["EXPERIMENT"]["NE_PARAM_MAGNITUDE"] / 2, config["EXPERIMENT"]["NE_PARAM_MAGNITUDE"] / 2,
                       config["EXPERIMENT"]["NE_PARAM_STEPS"])]
Y_SCALE = ["{0:.3g}".format(float(i) * config["PARAMS"]["GAMMA"]) for i in
           np.logspace(-config["EXPERIMENT"]["GAMMA_PARAM_MAGNITUDE"] / 2,
                       config["EXPERIMENT"]["GAMMA_PARAM_MAGNITUDE"] / 2,
                       config["EXPERIMENT"]["GAMMA_PARAM_STEPS"])]


def sel_coeff(x, alpha, gamma):
    edg = np.exp(config["PARAMS"]["BETA"] * (alpha + gamma * int(config["PARAMS"]["EXON_SIZE"]) * x))
    return -gamma * config["PARAMS"]["BETA"] * edg / (1 + edg)


def scaled_sel_coeff(x, alpha, gamma):
    return 4 * config["PARAMS"]["POPULATION_SIZE"] * sel_coeff(x, alpha, gamma)


def mut_bias(x):
    if x == 0.:
        return float("inf")
    elif x == 1.0:
        return -float("inf")
    return np.log((1 - x) / x) + np.log(config["ToyStab"]["NBR_STATES"] - 1)


def self_consistent_eq(x, alpha, gamma):
    return mut_bias(x) + scaled_sel_coeff(x, alpha, gamma)


x_eq = brentq(lambda x: self_consistent_eq(x, config["PARAMS"]["ALPHA"], config["PARAMS"]["GAMMA"]), 0.0, 1.0,
              full_output=True)[0]


def alpha_eq(gamma):
    return brentq(lambda a: self_consistent_eq(x_eq, a, gamma), 50, -(50 + int(config["PARAMS"]["EXON_SIZE"]) * gamma),
                  full_output=True)[0]


ALPHA = {gamma: alpha_eq(float(gamma)) for gamma in Y_SCALE}
REPLICATES = np.random.choice(9999, size=config["EXPERIMENT"]["REPLICATES"], replace=False)

localrules: all, make_simuevol, build, merge_seed, plot_heatmap

rule all:
    input: expand(EXPERIMENT + '/heatmap_{simumode}_plot', simumode=SIMULATORS)

rule make_simuevol:
    output: [EXPERIMENT + "/" + n for n in SIMULATORS]
    input: dir=EXPERIMENT + '/SimuEvol.version'
    params: compile="&& make clean && make" if COMPILE else ""
    log: out=EXPERIMENT + '/std.SimuEvol.stdout', err=EXPERIMENT + '/std.SimuEvol.stderr'
    shell:'cd {ROOT}/SimuEvol {params.compile} 2> {log.err} 1> {log.out} ' + \
         ' '.join(['&& cp build/{0} {1}'.format(n, EXPERIMENT) for n in SIMULATORS])

rule build:
    input: [EXPERIMENT + "/" + n for n in SIMULATORS]

rule run_simulation:
    output: touch(EXPERIMENT + '/{simumode}_{x}_{y}/{seed}_exp')
    input:
         exec=EXPERIMENT + '/{simumode}',
         config_pan=EXPERIMENT + '/config.' + '{simumode}',
    params:
          time="3-23:00", mem=4000, threads=1,
          pan=lambda wildcards: SIMUMODE_PARAM[wildcards.simumode] + (
              "--gamma_std {0}".format(float(getattr(wildcards, 'y'))) if wildcards.simumode == "SimuStab" else ""),
          pop_size=lambda wildcards: "--population_size {0}".format(float(getattr(wildcards, 'x'))),
          gamma=lambda wildcards: "--gamma {0}".format(float(getattr(wildcards, 'y'))),
          alpha=lambda wildcards: "--alpha {0}".format(ALPHA[getattr(wildcards, 'y')]),
          seed=lambda wildcards: "--seed {0}".format(wildcards.seed),
          dir=lambda wildcards: EXPERIMENT + '/{0}_{1}_{2}'.format(wildcards.simumode, wildcards.x, wildcards.y)
    log: out=EXPERIMENT + '/{simumode}_{x}_{y}/std.{seed}_exp.stdout',
       err=EXPERIMENT + '/{simumode}_{x}_{y}/std.{seed}_exp.stdout'
    shell:
         'mkdir -p {params.dir} && {input.exec} {CORE_PARAMS} {params.pan} {params.pop_size} {params.gamma} {params.alpha} {params.seed} --output {output} 2> {log.err} 1> {log.out}'

rule merge_seed:
    output: plot=EXPERIMENT + '/merge/{simumode}_{x}_{y}_seed.tsv'
    input:
         src=ROOT + "/scripts/scaling_merge.py",
         simu=expand(EXPERIMENT + '/{{simumode}}_{{x}}_{{y}}/{seed}_exp', seed=REPLICATES)
    shell: 'python3 {input.src} --input {input.simu} --output {output.plot}'

rule plot_heatmap:
    output: plot=directory(EXPERIMENT + '/heatmap_{simumode}_plot')
    input:
         src=ROOT + "/scripts/heatmap_analysis.py",
         simu=expand(EXPERIMENT + '/merge/{{simumode}}_{x}_{y}_seed.tsv', x=X_SCALE, y=Y_SCALE)
    params:
          x=lambda wildcards: "Population Size",
          y_dict=lambda wildcards: " ".join(["--y_param_key {0}:'$\\alpha={1:.3g},\\gamma={0}$'".format(y, ALPHA[y]) for y in Y_SCALE])
    shell:
         "mkdir -p {output.plot} && python3 {input.src} --input {input.simu} --output {output.plot} --x_param '{params.x}' {params.y_dict}"
