import os
import numpy as np

ROOT = os.path.abspath('../../..')

import sys

sys.path.append(ROOT)
from scripts.snakemake_module import *

EXPERIMENT = os.path.abspath('.')

configfile: open_config(EXPERIMENT, 'config.yaml')

COMPILE = config['EXPERIMENT']['COMPILE']
PREFERENCES = copy_params(EXPERIMENT, ROOT, config['SIMULATION']['PREFERENCES'])

#Â Parameters for the simulation
SIMULATION_PARAMS = '--nbr_branches {0}'.format(config['SIMULATION']['NBR_BRANCHES'])
SIMULATION_PARAMS += ' --nuc_matrix ' + copy_params(EXPERIMENT, ROOT, config['SIMULATION']['NUC_MATRIX'])
SIMULATION_PARAMS += ' --precision_matrix ' + copy_params(EXPERIMENT, ROOT, config['SIMULATION']['PRECISION_MATRIX'])
SIMULATION_PARAMS += ' --mutation_rate_per_generation {0}'.format(config['SIMULATION']['MUTATION_RATE_PER_GENERATION'])
SIMULATION_PARAMS += ' --root_age {0}'.format(config['SIMULATION']['ROOT_AGE'])
SIMULATION_PARAMS += ' --generation_time {0}'.format(config['SIMULATION']['GENERATION_TIME'])
SIMULATION_PARAMS += ' --exon_size {0}'.format(config['SIMULATION']['EXON_SIZE'])
SIMULATION_PARAMS += ' --bias_pop_size {0}'.format(config['SIMULATION']['BIAS_POP_SIZES'])
SIMULATION_PARAMS += ' --bias_mut_rate {0}'.format(config['SIMULATION']['BIAS_MUT_RATE'])
SIMULATION_PARAMS += ' --bias_gen_time {0}'.format(config['SIMULATION']['BIAS_GENERATION_TIME'])
if config['SIMULATION']['BRANCH_WISE_CORRELATION']:
    SIMULATION_PARAMS += ' --branch_wise_correlation'
if config['SIMULATION']['FIXED_POP_SIZES']:
    SIMULATION_PARAMS += ' --fix_pop_size'
if config['SIMULATION']['FIXED_MUT_RATE']:
    SIMULATION_PARAMS += ' --fix_mut_rate'
if config['SIMULATION']['FIXED_GENERATION_TIME']:
    SIMULATION_PARAMS += ' --fix_gen_time'

SIMUPOLY_PARAMS = ' --beta {0}'.format(config['SimuPoly']['BETA'])
SIMUPOLY_PARAMS += ' --sample_size {0}'.format(config['SimuPoly']['SAMPLE_SIZE'])
SIMUPOLY_PARAMS += ' --noise_sigma {0}'.format(config['SimuPoly']['NOISE_SIGMA'])
SIMUPOLY_PARAMS += ' --noise_theta {0}'.format(config['SimuPoly']['NOISE_THETA'])
SIMUPOLY_PARAMS += ' --preferences ' + PREFERENCES

SIMUDIV_PARAMS = '--nbr_grid_step {0}'.format(config['SimuDiv']['NBR_GRID_STEP'])
SIMUDIV_PARAMS += ' --preferences ' + PREFERENCES

SIMUFOLD_PARAMS = '--nbr_grid_step {0}'.format(config['SimuFold']['NBR_GRID_STEP'])
SIMUFOLD_PARAMS += ' --pdb_folder {0}/{1}'.format(ROOT, config['SimuFold']['PDB_FOLDER'])
SIMUFOLD_PARAMS += ' --nbr_exons {0}'.format(config['SimuFold']['NBR_EXONS'])
SIMUFOLD_PARAMS += ' --cut_off {0}'.format(config['SimuFold']['CUT_OFF'])

SIMUSTAB_PARAMS = '--nbr_grid_step {0}'.format(config['SimuFold']['NBR_GRID_STEP'])
SIMUSTAB_PARAMS += ' --nbr_exons {0}'.format(config['SimuFold']['NBR_EXONS'])

SIMUGEO_PARAMS = '--nbr_grid_step {0}'.format(config['SimuGeo']['NBR_GRID_STEP'])
SIMUGEO_PARAMS += ' --complexity {0}'.format(config['SimuGeo']['COMPLEXITY'])
SIMUGEO_PARAMS += ' --nbr_exons {0}'.format(config['SimuGeo']['NBR_EXONS'])

SIMULATION_SIMUMODE_PARAM = {"SimuDiv": SIMUDIV_PARAMS, "SimuPoly": SIMUPOLY_PARAMS,
                             "SimuFold": SIMUFOLD_PARAMS, "SimuStab": SIMUSTAB_PARAMS,
                             "SimuGeo": SIMUGEO_PARAMS}

diff_git_dir("{0}/SimuEvol".format(ROOT), "{0}/SimuEvol".format(EXPERIMENT))

SIMULATORS = config["EXPERIMENT"]["SIMULATORS"]
np.random.seed(seed=0)
REPLICATES = np.random.choice(9999, size=config["EXPERIMENT"]["REPLICATES"], replace=False)

localrules: all, make_simuevol, build, plot_relaxation, all_relaxation

rule all:
    input:
         EXPERIMENT + '/all_relaxation'

rule make_simuevol:
    output:
          EXPERIMENT + '/SimuDiv',
          EXPERIMENT + '/SimuFold',
          EXPERIMENT + '/SimuStab',
          EXPERIMENT + '/SimuGeo',
          EXPERIMENT + '/SimuPoly'
    input: dir=EXPERIMENT + '/SimuEvol.version'
    params: compile="&& make clean && make" if COMPILE else ""
    log: out=EXPERIMENT + '/std.SimuEvol.stdout', err=EXPERIMENT + '/std.SimuEvol.stderr'
    shell:
         'cd {ROOT}/SimuEvol {params.compile} 2> {log.err} 1> {log.out} && cp build/SimuDiv {EXPERIMENT} && cp build/SimuFold {EXPERIMENT} && cp build/SimuGeo {EXPERIMENT} && cp build/SimuPoly {EXPERIMENT} && cp build/SimuStab {EXPERIMENT}'

rule build:
    input:
         EXPERIMENT + '/SimuDiv', EXPERIMENT + '/SimuFold', EXPERIMENT + '/SimuGeo', EXPERIMENT + '/SimuPoly'

rule run_simulation:
    output: touch(EXPERIMENT + '/{simumode}_{seed}_exp')
    input:
         exec=EXPERIMENT + '/{simumode}',
         config_core=EXPERIMENT + '/config.SIMULATION',
         config_pan=EXPERIMENT + '/config.' + '{simumode}',
         prefs=PREFERENCES
    params:
          time="3-23:00", mem=4000, threads=1,
          pan=lambda wildcards: SIMULATION_SIMUMODE_PARAM[wildcards.simumode],
          scale=lambda wildcards: "--population_size {0}".format(float(config[wildcards.simumode]["POP_SIZE"])),
          seed=lambda wildcards: "--seed {0}".format(wildcards.seed)
    benchmark: EXPERIMENT + "/benchmarks.simulation.{simumode}_{seed}.tsv"
    log: out=EXPERIMENT + '/std.{simumode}_{seed}_exp.stdout',
       err=EXPERIMENT + '/std.{simumode}_{seed}_exp.stderr'
    shell:
         '{input.exec} {SIMULATION_PARAMS} {params.pan} {params.scale} {params.seed} --output {output} 2> {log.err} 1> {log.out}'

rule plot_relaxation:
    output: plot=directory(EXPERIMENT + '/relaxation_{simumode}_plot')
    input:
         src=ROOT + "/scripts/relaxation_analysis.py",
         simu=expand(EXPERIMENT + '/{{simumode}}_{seed}_exp', seed=REPLICATES)
    shell: 'mkdir {output.plot} && python3 {input.src} --input {input.simu} --output {output.plot}'

rule all_relaxation:
    output: touch(EXPERIMENT + '/all_relaxation')
    input:
         expand(EXPERIMENT + '/relaxation_{simumode}_plot', simumode=SIMULATORS)
