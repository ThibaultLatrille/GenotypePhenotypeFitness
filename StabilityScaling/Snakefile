import os
import numpy as np

ROOT = os.path.abspath('../../..')

import sys

sys.path.append(ROOT)
from scripts.snakemake_module import *

EXPERIMENT = os.path.abspath('.')

configfile: open_config(EXPERIMENT, 'config.yaml')

COMPILE = config['EXPERIMENT']['COMPILE']

diff_git_dir("{0}/SimuEvol".format(ROOT), "{0}/SimuEvol".format(EXPERIMENT))

SCALES = ["{0:.3g}".format(i) for i in np.logspace(np.log10(config["EXPERIMENT"]["SCALE_LOW"]), np.log10(config["EXPERIMENT"]["SCALE_HIGH"]), config["EXPERIMENT"]["SCALE_POINTS"])]
np.random.seed(seed=0)
REPLICATES = np.random.choice(9999, size=config["EXPERIMENT"]["REPLICATES"], replace=False)

localrules: all, make_simuevol, build, merge_seed, plot_scaling, all_scaling

rule all:
    input:
         EXPERIMENT + '/all_scaling'

rule make_simuevol:
    output:
          EXPERIMENT + '/Stability'
    input: dir=EXPERIMENT + '/SimuEvol.version'
    params: compile="&& make clean && make" if COMPILE else ""
    log: out=EXPERIMENT + '/std.SimuEvol.stdout', err=EXPERIMENT + '/std.SimuEvol.stderr'
    shell: 'cd {ROOT}/SimuEvol {params.compile} 2> {log.err} 1> {log.out} && cp build/Stability {EXPERIMENT}'

rule build:
    input:
         EXPERIMENT + '/Stability'

rule run_simulation:
    output: touch(EXPERIMENT + '/{nbr_states}_{scale}_{seed}_exp')
    input:
         exec=EXPERIMENT + '/Stability',
         config_core=EXPERIMENT + '/config.EXPERIMENT',
    params:
          time="3-23:00", mem=4000, threads=1,
          scale=lambda wildcards: "--population_size {0}".format(float(config['EXPERIMENT']["POP_SIZE"]) * float(wildcards.scale)),
          experiment=lambda wildcards: "--nbr_states {0} --seed {1} --nbr_sites {2}".format(wildcards.nbr_states, wildcards.seed, config['EXPERIMENT']["NBR_SITES"])
    benchmark: EXPERIMENT + "/benchmarks.simulation.{nbr_states}_{scale}_{seed}.tsv"
    log: out=EXPERIMENT + '/std.{nbr_states}_{scale}_{seed}_exp.stdout', err=EXPERIMENT + '/std.{nbr_states}_{scale}_{seed}_exp.stderr'
    shell: '{input.exec} {params.scale} {params.experiment} --output {output} 2> {log.err} 1> {log.out}'

rule merge_seed:
    output: plot=EXPERIMENT + '/merge_{nbr_states}_{scale}_seed.tsv'
    input:
         src=ROOT + "/scripts/scaling_merge.py",
         simu=expand(EXPERIMENT + '/{{nbr_states}}_{{scale}}_{seed}_exp', seed=REPLICATES)
    shell: 'python3 {input.src} --input {input.simu} --output {output.plot}'


rule plot_scaling:
    output: plot=directory(EXPERIMENT + '/scaling_{nbr_states}_plot')
    input:
         src=ROOT + "/scripts/scaling_analysis.py",
         simu=expand(EXPERIMENT + '/merge_{{nbr_states}}_{scale}_seed.tsv', scale=SCALES)
    shell: 'mkdir -p {output.plot} && python3 {input.src} --input {input.simu} --output {output.plot}'

rule all_scaling:
    output: touch(EXPERIMENT + '/all_scaling')
    input:
         expand(EXPERIMENT + '/scaling_{nbr_states}_plot', nbr_states=config['EXPERIMENT']["NBR_STATES"])
